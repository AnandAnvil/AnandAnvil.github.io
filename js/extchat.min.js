"use strict";

// Cookie
var setCookie = function setCookie(cname, cvalue, exdays) {
  var d = new Date();
  d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
  var expires = "expires=" + d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
};

var buildChatMenu = function(menu) {
  var dropDownLi = "";
  if (menu.mainIcon)
    $("#panicButton")
      .removeClass()
      .addClass(menu.mainIcon);
  if (menu.title) $("#panicButton").attr("title", menu.title);
  $("#chatMenuDropdown").remove();
  if (menu.menu) {
    menu.menu.forEach(function(ParentItem) {
      if (ParentItem.menus) {
        var childMenu = "";
        ParentItem.menus.forEach(function(menuItem) {
          childMenu += `<li><span class="${
            menuItem.icon ? menuItem.icon : ""
          }"></span><a tabindex="-1" href="#" data-display=${
            menuItem.display
          } data-alias=${menuItem.alias ? menuItem.alias : ""}>${
            menuItem.name
          }</a></li>`;
        });
        dropDownLi += `<li class="dropdown-header language-title"><span class="${
          ParentItem.icon ? ParentItem.icon : ""
        }">${ParentItem.name}</span>
       </li>${childMenu}`;
      } else {
        dropDownLi += `<li><span class="${
          ParentItem.icon ? ParentItem.icon : ""
        }"></span><a tabindex="-1" href="#" data-display=${
          ParentItem.display
        } data-alias=${ParentItem.alias ? ParentItem.alias : ""}>${
          ParentItem.name
        }</a></li>`;
      }
    });
    var menuDIv = `<div id="chatMenuDropdown" class="dropdown-content"><ul class="dropdown-menu">${dropDownLi}</ul></div>`;
    // console.log($(menuDIv).get(0));
    $(menuDIv).appendTo("header .chatActionIcons");
    $("#panicButton").off("click");
    $("li.has-submenu > a").on("click", function(e) {
      e.stopPropagation();
      e.preventDefault();
      $(this)
        .next("ul")
        .toggle();
    });
  }
};
// $.fn.getPreviousChat = function(options) {
//   var settings = $.extend(
//     {
//       innerClass: ".ajaxMsgInner",
//       btnClass: ".loadMorebroadCast",
//       adjust: 30
//     },
//     options
//   );
//   $(this).on("scroll", function() {
//     var thisScroll = $(this).scrollTop();
//     var tHeight = $(settings.innerClass).height();
//     if (thisScroll + 10 < 11 && tHeight > 600) {
//       console.log("if");
//       $(this)
//         .find(settings.btnClass)
//         .trigger("click");
//     }
//   });
//   return this;
// };
$("body").on("click", function(event) {
  var matches = event.target.matches
    ? event.target.matches("#panicButton")
    : event.target.msMatchesSelector("#panicButton");
  if (!matches) {
    var openDropdown = $("#chatMenuDropdown");
    if (openDropdown.hasClass("show")) {
      openDropdown.removeClass("show");
      openDropdown.find("ul.dropdown-menu-child").hide();
    }
  } else {
    $(this)
      .find("#chatMenuDropdown")
      .toggleClass("show");
  }
});
var getCookie = function getCookie(cname) {
  var name = cname + "=";
  var ca = document.cookie.split(";");
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == " ") {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
};

var checkCookie = function checkCookie() {
  var user = getCookie("username");
  if (user != "") {
    console.log("Welcome again " + user);
  } else {
    user = guid();
    if (user != "" && user != null) {
      setCookie("username", user, 365);
    }
  }
};
$("body").on("click", ".read-more-content", function() {
  $(this)
    .parent(".long-content")
    .addClass("view-full");
});
// guid Function
var GuestID = function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return (
    s4() +
    s4() +
    "-" +
    s4() +
    "-" +
    s4() +
    "-" +
    s4() +
    "-" +
    s4() +
    s4() +
    s4()
  );
};

////////////////////////////////////
function callAutoCompelete(availableTags) {
  destroyAuto();
  var messageAuto = $("#message-to-send")
    .autocomplete({
      source: availableTags,
      minLength: 0,
      mustMatch: true,
      selectFirst: true,
      autoFocus: true,

      select: function select(event, ui) {
        if (!event.isDefaultPrevented()) {
          console.log($("#message-to-send").val());
        }
      },
      change: function change(event, ui) {},
      position: {
        collision: "none",
        my: "left bottom",
        at: "left top"
      }
    })
    .keyup(function() {})
    .focus(function() {
      if ($("#message-to-send").data("ui-autocomplete")) {
        $("#message-to-send").autocomplete("search", "");
      }
    });
}
//////////
function destroyAuto() {
  if ($("#message-to-send").data("ui-autocomplete")) {
    $("#message-to-send").autocomplete("destroy");
  }
}

function replaceURL(html) {
  var url1 = /(^|&lt;|\s)(www\..+?\..+?)(\s|&gt;|$)/g,
    url2 = /(^|&lt;|\s)(((https?|ftp?|http):\/\/|mailto:).+?)(\s|&gt;|$)/g,
    html = html
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(url1, '$1<a href="http://$2" target="_blank">$2</a>$3')
      .replace(url2, '$1<a href="$2" target="_blank">$2</a>$5');
  return html;
}

function linkify(inputText) {
  var replacedText, replacePattern1, replacePattern2, replacePattern3;

  var str = inputText; //"https://drive.google.com/open?id=1ud3TtBlhCcsFPLM2oXU108mxNEaeOzJk";
  var str2 = str.indexOf("open?id=");
  var str1 = $.trim(str.substring(str2 + 8));
  if (str2 != -1) {
    var str3 =
      "<div><iframe class='iframetrack' src=\"https://drive.google.com/file/d/" +
      str1 +
      '/preview" width="280" height="300"></iframe></div>';
    return str3;
  }

  //URLs starting with http://, https://, or ftp://
  replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
  replacedText = inputText.replace(
    replacePattern1,
    '<a href="$1" target="_blank">$1</a>'
  );

  //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
  replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
  replacedText = replacedText.replace(
    replacePattern2,
    '$1<a href="http://$2" target="_blank">$2</a>'
  );

  //Change email addresses to mailto:: links.
  replacePattern3 = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
  replacedText = replacedText.replace(
    replacePattern3,
    '<a href="mailto:$1">$1</a>'
  );

  return replacedText;
}

var Runchat = function chatInit(conf) {
  var $chat = {};
  $chat.user = {};
  $chat.options = conf.options;
  $chat.device = conf.device ? conf.device : "desktop";
  $chat.user.name = conf.options.userName ? conf.options.userName : "Me";
  $chat.headerToken = conf.options.token ? conf.options.token : "";
  $chat.saveLogs = conf.options.hasOwnProperty("saveLogs")
    ? conf.options.saveLogs
    : true;
  $chat.user.messageAgent = "Workflow";
  $chat.user.guid =
    typeof conf.vizData !== "undefined" && conf.vizData
      ? conf.vizData.email + `_domain_${conf.clientDomain}`
      : GuestID();
  $chat.workflowUserId = "10085";
  $chat.workflows = conf.Id;
  $chat.workflowName = Object.keys($chat.workflows)[0];
  $chat.workflowId = "5c2ef049f70d712b70a8e4d3";
  $chat.heading = $chat.workflowName;
  $chat.description = conf.options.description ? conf.options.description : "";
  $chat.botName = $chat.workflowName;
  $chat.tid = conf.tid;
  $chat.logdomain = "viz-demo.vizru.com";
  $chat.domain = "viz-demo.vizru.com";
  $chat.SocketDomain = "https://vizru.com:8000/";
  $chat.options.attachment =
    typeof $chat.options.attachment === "undefined"
      ? true
      : $chat.options.attachment;
  conf.chatInternalCall ? $("body").addClass("vizappchat") : null;
  var chatOptions = {
    socketConnect: false,
    connection: false,
    fileAttached: false,
    notReceivedMsg: 0,
    fileReceived: true,
    dropzone: false,
    dropfiles: [],
    presentFile: 0,
    timer: 0,
    msg: ""
  };
  var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;

  console.log("chatObj:::", $chat);
  var Heading = $chat.heading + "<small>" + $chat.description + "</small>";
  $("#custColLeft h3").html(Heading);

  var socketObj;
  var customDiv = {
    typing:
      '<section id="typingIndication"><label>' +
      $chat.botName +
      '</label><b><img src="/chat_typing-dots-speed-2.gif"></b></section>',
    notDelivered: '<i class="not-deliver">your message was not delivered</i>'
  };

  var fileAttachData;

  var setOptions_Func = function setOptions_Func() {
    if (!$chat.options.attachment) $("#msg_footer .fileContainer").hide();
    $("#message-to-send").attr(
      "placeholder",
      $chat.options.textareaPlaceholder
        ? $chat.options.textareaPlaceholder
        : "Type a Message"
    );
    if (!$chat.options.helpBtn) $("#panicButton").hide();
    if ($chat.options.helpBtnTooltip)
      $("#panicButton").attr("title", $chat.options.helpBtnTooltip);
    if ($chat.options.menuConf) {
      typeof $chat.options.menuConf === "string"
        ? buildChatMenu(JSON.parse($chat.options.menuConf))
        : buildChatMenu($chat.options.menuConf);
    }
  };
  setOptions_Func();

  var ConnectSocket_Func = function ConnectSocket_Func() {
    ErrorMsg_Func({
      show: true,
      message: "Connecting to server"
    });
    var socket = io.connect($chat.SocketDomain, {
      query:
        "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb21haW4iOiJ2aXpydSIsIm5hbWUiOiJHdWVzdCIsImFnZW50IjoiV29ya2Zsb3cifQ.bDuKpCe3ql1OjELAwZJG6GW89Y84mfYZedqc9CI8P1U"
    });
    //socket connetion starts
    socket.on("connect", function() {
      socketObj = this;
      chatOptions.connection = true;
      ErrorMsg_Func({ show: false });
      socket.emit("set_user", {
        user: "Guest",
        tid: $chat.tid,
        guid: $chat.user.guid,
        connectedWorkflow: $chat.workflows,
        domain: $chat.domain,
        workflowId: $chat.workflowId,
        headerToken: $chat.headerToken,
        saveLogs: $chat.saveLogs,
        device: $chat.device,
        logdomain: $chat.logdomain,
        apiUserId: $chat.workflowUserId
      });
      console.log("socketid:::", socket.io.engine.id);
      if (!chatOptions.socketConnect) {
        chatOptions.socketConnect = true;
        socket.emit("get_flowmessages", {
          to: $chat.user.guid,
          from: $chat.workflowId,
          tid: $chat.tid,
          logdomain: $chat.logdomain,
          Agent: $chat.user.messageAgent,
          userId: $chat.workflowUserId
        });
      }
    });
    ChatLogic_Func(socket);
  };

  var ChatLogic_Func = function ChatLogic_Func(socket) {
    // Receive New Message
    socket.on("new_message", function(data) {
      console.log("new_message:::", data);
      if (data.menuConf) {
        data.menuConf = JSON.parse(data.menuConf);
        buildChatMenu(data.menuConf);
      }
      if (data.jsCode) {
        if (data.exeContext === "parent") {
          window.parent.postMessage(
            { exeContext: "parent", jsCode: data.jsCode },
            "*"
          );
        } else {
          var sentData = eval(data.jsCode);
          SentMessage_Func({
            msg: "/data",
            display: false,
            data: sentData
          });
        }
      }
      if (data.timer) endAndStartTimer();
      else window.clearTimeout(chatOptions.timer);

      function endAndStartTimer() {
        window.clearTimeout(chatOptions.timer);
        chatOptions.timer = window.setTimeout(function() {
          SentMessage_Func({ msg: "/timeout", display: false });
        }, data.timer);
      }
      if (data.Body == "/null") {
        $("#typingIndication").remove();
        return;
      }
      if (data.Body != "/stop") $("#typingIndication").remove();

      var attachment =
        typeof data.showAttachment === "undefined"
          ? $chat.options.attachment
          : parseInt(data.showAttachment);
      if (attachment) $("#msg_footer .fileContainer").show();
      else $("#msg_footer .fileContainer").hide();
      data.hasOwnProperty("showTextarea") && data.showTextarea == "0"
        ? $("#message-to-send").attr("disabled", true)
        : $("#message-to-send").attr("disabled", false);
      if (chatOptions.notReceivedMsg) {
        $(".not-deliver")
          .last()
          .remove();
        chatOptions.notReceivedMsg--;
      }
      if (data.Body == "") return;
      var time = getTime_Func();
      if (data.from == "Admin") data.Body = data.message;
      // Options Get Replace
      var MessageBody = data.Body;
      if (MessageBody.indexOf("<div") == -1) MessageBody = linkify(MessageBody);
      if (!$($.parseHTML(MessageBody)).hasClass("card")) {
        MessageBody = MessageBody.replace("[", "<br/>[");
        MessageBody = MessageBody.replace(/]/g, "</a>");
        MessageBody = MessageBody.replace(
          /\[/g,
          "<a class='returntext button'>"
        );
        // Option Tags Ends here
        // AutoSuggest Call over here
        var autosuggestList = "";
        autosuggestList = MessageBody.split("|");
        if (Array.isArray(autosuggestList)) {
          MessageBody = autosuggestList.shift();
          callAutoCompelete(autosuggestList);
        }
      }
      MessageBody = MessageBody.split("/repost").map(function(item) {
        return item.trim();
      });
      var delayTime = 0;
      MessageBody.map(function(msg, i) {
        chatOptions.msg = msg;
        setTimeout(function() {
          $("#typingIndication").remove();
          var message_div = buildDiv_Func("other", msg, time);
          if (message_div.find(".card").length) {
            message_div.find(".thread").addClass("hasCard");
          }
          if (message_div.find(".drop-zone").length)
            chatOptions.dropzone = true;
          $("#messageBody")
            .append(message_div)
            .find(".sliderOverflowwrap")
            .cardSlider();
          if (MessageBody.length - 1 != i) showTyping_Func();
          scrollToBottom();
          if (data.jsCodes) eval(data.jsCodes[0]);
        }, delayTime);
        delayTime += 1000;
      });
    });

    // Get message from log ///
    socket.on("get_flowmessages", function(gt_msgs) {
      console.log("logs:::", gt_msgs);
      var totalmessages = gt_msgs === null ? 0 : gt_msgs.length;
      if (totalmessages == 0) {
        var startupText = $chat.options.startupText
          ? $chat.options.startupText
          : "Hi";
        SentMessage_Func({
          msg: startupText,
          display: false
        });
      }
      if (totalmessages > 0) {
        clearChatHistory();
        gt_msgs = gt_msgs.reverse();
        if (gt_msgs.length > 50) gt_msgs.splice(0, 50);
        for (var i in gt_msgs) {
          var msgData = gt_msgs[i];
          var time = getTime_Func(msgData["created-at"]);
          var MessageBody = msgData.body;
          if (MessageBody.indexOf("<div") == -1)
            MessageBody = linkify(MessageBody);
          if (!$($.parseHTML(MessageBody)).hasClass("card")) {
            MessageBody = MessageBody.replace(/]/g, "</a>");
            MessageBody = MessageBody.replace(
              /\[/g,
              "<a class='returntext button'>"
            );
          }
          MessageBody = MessageBody.split("/repost").map(function(item) {
            return item.trim();
          });
          MessageBody.map(function(msg) {
            var message_div;
            if (gt_msgs[i].from == $chat.user.guid) {
              message_div = buildDiv_Func("guest", msg, time);
            } else {
              message_div = buildDiv_Func("other", msg, time);
            }
            if (message_div.find(".card").length) {
              message_div.find(".thread").addClass("hasCard");
            }
            $("#messageBody").append(message_div);
          });
        }
        SentMessage_Func({
          msg: "/reopen",
          display: false
        });
      }
      $("#messageBody")
        .find(".hasCard input:radio:not(:disabled)")
        .attr("disabled", true);
      $("#messageBody")
        .find(".getchatvalue[type='radio']:enabled")
        .attr("disabled", true);
      $("#messageBody")
        .find(
          "a.returntext:not(.disabled), .getchatvalue, .returnVal:not(.disabled)"
        )
        .addClass("disabled");
      if ($(".msgBody section").is(":last-child")) {
        $(".msgBody section:last")
          .find("a.returntext, .getchatvalue, .returnVal")
          .removeClass("disabled");
        $(".msgBody section:last")
          .find(".hasCard input:radio, .getchatvalue[type='radio']")
          .removeAttr("disabled");
      }
      scrollToBottom();
    });

    var showTyping_Func = function() {
      $("#typingIndication").remove();
      $("#messageBody").append(customDiv.typing);
      scrollToBottom();
    };

    socket.on("showTyping", function(data) {
      showTyping_Func();
    });

    socket.on("clear_history", function(data) {
      $("#messageBody").empty();
      var startupText = $chat.options.startupText
        ? $chat.options.startupText
        : "/start";
      SentMessage_Func({
        msg: startupText,
        display: false
      });
    });

    socket.on("file_received", function(data) {
      chatOptions.fileReceived = true;
    });

    socket.on("disconnect", function() {
      chatOptions.connection = false;
      if (!chatOptions.fileReceived) {
        var time = getTime_Func();
        var message_div = buildDiv_Func(
          "other",
          "There was an error in uploading your file. Please try again",
          time
        );
        $("#messageBody").append(message_div);
        scrollToBottom();
        chatOptions.fileReceived = true;
      }
      ErrorMsg_Func({
        show: true,
        message: "Your conversation is offline"
      });
    });
    ////////////////End ChatLogic Function
  };

  var ErrorMsg_Func = function ErrorMsg_Func(options) {
    if (options.show === true) {
      $(".errorMessage").text(options.message);
      $(".errorMessage").show();
    } else {
      $(".errorMessage").hide();
    }
  };

  var buildDiv_Func = function buildDiv_Func(side, msg, time) {
    var message_div;
    if (side == "guest") {
      message_div = $(
        "<article><label>" +
          $chat.user.name +
          '</label><div class="thread">' +
          msg +
          '</div><span class="time">' +
          (chatOptions.connection ? "" : customDiv.notDelivered) +
          time +
          "</span></article>"
      );
    } else {
      message_div = $(
        "<section><label>" +
          $chat.botName +
          '</label><div class="thread">' +
          $.trim(msg).replace(/\u200B/g, "") +
          '</div><span class="time">' +
          time +
          "</span></section>"
      );
    }
    return message_div;
  };

  var SentMessage_Func = function SentMessage_Func(options) {
    if (chatOptions.fileAttached) sentFile_Func(fileAttachData);
    var message = options.msg || $("#message-to-send").val();
    while (SCRIPT_REGEX.test(message)) {
      message = message.replace(SCRIPT_REGEX, "");
    }
    var message_div;
    message = message.replace(/\n/g, "</br>");
    var time = getTime_Func();
    if (message.charAt(0) == "/" && !options.msg) {
      message = "";
      $("#message-to-send").val("");
      message_div = buildDiv_Func(
        "other",
        "messages starting with slash are reserved",
        time
      );
      $("#messageBody").append(message_div);
      scrollToBottom();
    }
    var speclMsg = ["/help", "/timeout", "/data", "/reopen", "/start"];
    if (!_.contains(speclMsg, message) && message.charAt(0) == "/")
      message = "";

    if (chatOptions.fileAttached) sentFile_Func(fileAttachData);
    else if (message != "") {
      var msg_data = {
        from: $chat.user.guid,
        workflowId: $chat.workflowId,
        Body: options.alias || message,
        domain: $chat.domain,
        device: $chat.device,
        tid: $chat.tid,
        Agent: $chat.user.messageAgent,
        logdomain: $chat.logdomain,
        userId: $chat.workflowUserId
      };
      if (options.data) msg_data.data = JSON.stringify(options.data);
      console.log("msg_data:::", msg_data);
      if (chatOptions.socketConnect && chatOptions.connection == false) {
        chatOptions.notReceivedMsg++;
      }

      message = replaceURL(message);
      message = $.parseHTML(message)[0].data;

      message_div = buildDiv_Func("guest", message, time);
      $("#typingIndication").remove();
      if (options.display) $("#messageBody").append(message_div);
      if (!options.msg) $("#message-to-send").val("");
      scrollToBottom();
      socketObj.emit("workflow_trigger", msg_data);
    }
  };

  $("#message-to-send").keydown(function(e) {
    if ((e.keyCode || e.which) == 13 && e.shiftKey) {
      // prevent default behavior
    } else if (
      $(".tribute-container").is(":visible") != true &&
      (e.keyCode || e.which) == 13
    ) {
      //Enter keycode
      e.preventDefault();
      if ($("#message-to-send").data("ui-autocomplete")) {
        if ($(".ui-widget-content.ui-autocomplete:visible").length == 1) {
          return;
        } else {
          SentMessage_Func({ display: true });
        }
      } else {
        SentMessage_Func({ display: true });
      }
    }
  });

  $("#cutomSendBtn").click(function(e) {
    SentMessage_Func({ display: true });
  });

  var getTime_Func = function getTime_Func(timestamp) {
    if (!timestamp) {
      var date = new Date();
      var time = date.toLocaleString("en-IN", {
        hour: "numeric",
        minute: "numeric",
        hour12: true
      });
      return time + ", Today";
    } else if (moment(timestamp).isSame(moment(), "day")) {
      var time = moment(timestamp).format("hh:mm A");
      return time + ", Today";
    } else {
      var time = moment(timestamp).format("Do MMMM hh:mm A");
      return time;
    }
  };

  var clearFileInput = function clearFileInput() {
    $("#chatFileInput").val(null);
    $("#file-upload_footer li")[0].childNodes[0].data = "";
    $("#file-upload_footer").removeClass("active");
    $("#msg_footer").show();
    fileAttachData = "";
    chatOptions.fileAttached = false;
  };

  var clearChatHistory = function clearChatHistory() {
    $("#messageBody").empty();
  };

  var scrollToBottom = function scrollToBottom() {
    $("#message-to-send").focus(function () {
      scrollToBottom();
   });
    var msg_blk = document.getElementById("messageBody");
    window.setTimeout(function() {
      $(msg_blk).animate(
        { scrollTop: msg_blk.scrollHeight - msg_blk.clientHeight },
        50
      );
    }, 0);
    if (chatOptions.dropzone) addListener("drop-zone");
  };

  $("#chatFileInput").on("change", readFile);

  function getMsgObj(el) {
    var display =
      $(el)
        .get(0)
        .hasAttribute("data-display") &&
      $(el)
        .data("display")
        .toString() == "false"
        ? false
        : true;
    var text = $(el).data("value") ? $(el).data("value") : $(el).text();
    var msgObj = $(el).data("alias")
      ? {
          msg: text,
          display: display,
          alias: $(el).data("alias")
        }
      : {
          msg: text,
          display: display
        };
    return msgObj;
  }

  $("body").on("click", "#chatMenuDropdown a", function(event) {
    var msgObj = getMsgObj(this);
    SentMessage_Func(msgObj);
  });

  $("body").on(
    "click",
    "input.returntext[type='radio']:enabled",
    ".getchatvalue[type='radio']:enabled",
    function() {
      var msgObj = getMsgObj(this);
      SentMessage_Func(msgObj);
      $(this)
        .parentsUntil(".card")
        .find("[type='radio']")
        .prop("disabled", true);
    }
  );

  $("body").on(
    "click",
    "a.returntext:not(.disabled), .getchatvalue, .returnVal:not(.disabled)",
    function() {
      var hasDataSelct = $(this)
        .closest(".thread")
        .find("select.data-select-field");
      if ($(this).hasClass("button")) {
        $(this)
          .closest(".thread")
          .find(".returntext, .returnVal, .getchatvalue")
          .addClass("disabled");
        if (hasDataSelct.length) {
          $(this).data("value", hasDataSelct.val());
          hasDataSelct.attr("disabled", "disabled");
        }
      }
      var msgObj = getMsgObj(this);
      SentMessage_Func(msgObj);
    }
  );

  $("#file-upload_footer input.btn.btn-green").on("click", function() {
    sentFile_Func(fileAttachData);
  });
  $("#file-upload_footer ul li span").on("click", function() {
    clearFileInput();
  });
  $("#file-upload_footer input.btn.btn-grey").on("click", function() {
    clearFileInput();
  });

  var dropDownValues;
  function addListener(element) {
    var documentUploadDiv = $(".hasCard")
      .last()
      .has(".drop-zone");
    dropDownValues = documentUploadDiv.find(".card").attr("data-dropdown");
    var filetags = documentUploadDiv.find(".card").attr("data-tags");
    if (dropDownValues) dropDownValues = JSON.parse(dropDownValues);
    $(".drop-zone")
      .last()
      .on("drop", function(e) {
        if (
          e.originalEvent.dataTransfer &&
          e.originalEvent.dataTransfer.files.length
        ) {
          e.preventDefault();
          e.stopPropagation();
          chatOptions.dropfiles = chatOptions.dropfiles.concat(
            Array.from(Object.values(e.originalEvent.dataTransfer.files))
          );
          buildFileUpload(chatOptions.dropfiles, dropDownValues, filetags);
        }
      });
    documentUploadDiv.find("input").on("change", function(e) {
      if (e.target.files && e.target.files.length) {
        chatOptions.dropfiles = chatOptions.dropfiles.concat(
          Array.from(Object.values(e.target.files))
        );
        buildFileUpload(chatOptions.dropfiles, dropDownValues, filetags);
      }
    });
    $(".drop-zone")
      .last()
      .on("click", function() {
        documentUploadDiv.find("input").click();
      });
    documentUploadDiv.find(".filesRemove").on("click", function(e) {
      chatOptions.dropfiles.splice(
        $(this)
          .closest(".file-item")
          .data("fileno"),
        1
      );
      if ($(".thread .file-item").length == 1) {
        chatOptions.dropzone = true;
        documentUploadDiv.find(".file-btns").hide();
        $(this)
          .closest(".file-item")
          .remove();
        documentUploadDiv.find(".drop-zone").show();
      } else {
        $(this)
          .closest(".file-item")
          .remove();
      }
    });
    $(".save-upload")
      .last()
      .click(function() {
        for (var i = 0; i < chatOptions.dropfiles.length; i++) {
          var fileThread = documentUploadDiv.find(".file-" + i);
          var category = fileThread.find(".file-category").val();
          documentUploadDiv.find(".tag span[data-role=remove]").remove();
          documentUploadDiv.find("button").remove();
          $(".file-item")
            .find(".filesRemove")
            .remove();
          fileThread
            .find(".file-categorySelect")
            .append(`<div class="category-selected">${category}</div>`);
        }
        documentUploadDiv.find(".file-itemWrap").addClass("started");
        documentUploadDiv.find(".drop-zone.card").hide();
        uploadDocuments(documentUploadDiv);
      });
    $(".cancel-upload")
      .last()
      .click(function() {
        chatOptions.dropzone = true;
        chatOptions.dropfiles = [];
        documentUploadDiv.find(".file-item").remove();
        documentUploadDiv.find(".file-btns.right").remove();
        documentUploadDiv.find(".drop-zone").show();
      });
  }

  function buildFileUpload(filenames, category, tag) {
    var categoryDiv = "";
    var tagsDiv = "";
    if (category && category.length > 1) {
      var optionDiv = category.map(function(option) {
        return `<option value='${option}'></option>`;
      });
      categoryDiv = `<div class="file-item-fields category"><span class="file-icon"><i class="icon-file-form"></i></span><span class="file-categorySelect"><input type="text" class="form-control file-category" placeholder="Category" list="options" /><datalist id="options">${optionDiv}</datalist></span></div>`;
    }
    if (Boolean(tag)) {
      tagsDiv = `<div class="file-item-fields file-tags"><span class="file-icon"><i class="icon-enable-tag"></i></span><span class="file-tagInput"><input type="text" placeholder="Add tag" class="form-control file-tag" data-role="tagsinput"/></span></div>`;
    }
    var documentUploadDiv = $(".hasCard")
      .last()
      .has(".drop-zone");
    var buttonTextValues = documentUploadDiv
      .find(".card")
      .attr("data-button_text");
    if (buttonTextValues) {
      buttonTextValues = JSON.parse(buttonTextValues);
    } else {
      buttonTextValues = ["Save and Upload", "Cancel All"];
    }
    var file_section = "";
    filenames.map(function(file, i) {
      var temp = `<div class="file-item file-${i}" data-fileNo=${i}><span class="filesRetry">File upload failed. retry <i class="icon-autorenew"></i></span>
      <span class="filesRemove"><i class="icon-close-thick"></i></span><span class="filesUploaded"><i class="icon-tick"></i></span>
    <div class="file-itemsBox"><div class="file-item-fields"><span class="file-icon"><i class="icon-file-document"></i></span><span class="file-name" title="${file.name}">${file.name}</span></div>
    ${categoryDiv}${tagsDiv}
    </div>
    <div class="progress">
      <div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="0"
      aria-valuemin="0" aria-valuemax="100" style="width:0%">
      </div>
    </div>
    </div>`;

      file_section += temp;
    });

    $(".drop-zone")
      .last()
      .remove();
    $('.hasCard input[type="file"]')
      .last()
      .remove();

    var sectionDiv = `<div class="file-itemWrap">${file_section}${
      chatOptions.msg
    }<div class="file-btns right"><button type="button" class="save-upload chatActionBtn">${
      buttonTextValues[0]
    }</button><button type="button" class="cancel-upload chatActionBtn">${
      buttonTextValues[1]
    }</button></div></div>`;
    documentUploadDiv.find(".file-itemWrap").remove();
    documentUploadDiv.prepend(sectionDiv);

    documentUploadDiv.find(".file-tag").tagsinput({
      confirmKeys: [13, 44]
    });
    chatOptions.dropzone = false;
    addListener();
  }

  function uploadDocuments(el) {
    var file = chatOptions.dropfiles[chatOptions.presentFile];
    var category =
      dropDownValues && dropDownValues.length == 1
        ? dropDownValues[0]
        : el
            .find(".file-category")
            .eq(chatOptions.presentFile)
            .val();
    var workflowExec =
      conf.clientDomain && conf.clientDomain === $chat.domain
        ? "workflow.exec"
        : "workflow.trigger";
    var tags =
      el
        .find(".file-tag")
        .eq(chatOptions.presentFile)
        .tagsinput("items") || [];
    var fData = new FormData();
    fData.append("file", file, file.name);
    fData.append("from", $chat.user.guid);
    fData.append("currentFile", chatOptions.presentFile + 1);
    fData.append("totalFile", chatOptions.dropfiles.length);
    fData.append("Body", "/file");
    fData.append("device", $chat.device);
    fData.append("Agent", "Workflow");
    fData.append("headerToken", $chat.headerToken);
    fData.append("fileCategory", category);
    fData.append("fileTag", tags);
    el.find("input").hide();
    $.ajax({
      url: `https://${$chat.domain}/${workflowExec}/${$chat.workflowId}`,
      type: "POST",
      contentType: false,
      cache: false,
      processData: false,
      data: fData,
      xhr: function() {
        var myXhr = $.ajaxSettings.xhr();
        (myXhr.upload || myXhr).addEventListener("progress", function(e) {
          var done = e.position || e.loaded;
          var total = e.totalSize || e.total;
          var percentComplete = Math.round((done / total) * 100);
          el.find(".progress-bar")
            .eq(chatOptions.presentFile)
            .css("width", percentComplete + "%");
        });
        return myXhr;
      },
      beforeSend: function() {
        el.find(".progress")
          .eq(chatOptions.presentFile)
          .show();
      },
      success: function(data, textStatus, jqXHR) {
        // var returnIds = data[0].files.split("-");
        // var fileUrl = `https://${$chat.domain}/sys/core/files.pxy/${$chat.workflowUserId}-${returnIds[1]}-${returnIds[2]}/${returnIds[0]}`;
        el.find(`[data-fileno='${chatOptions.presentFile}']`).addClass(
          "uploadSuccess"
        );
        el.find(".progress")
          .eq(chatOptions.presentFile)
          .hide();

        el.find(
          `[data-fileno='${chatOptions.presentFile}'] .filesUploaded`
        ).show();
        if (chatOptions.dropfiles.length === chatOptions.presentFile + 1) {
          chatOptions.presentFile = 0;
          chatOptions.dropfiles = [];
          chatOptions.dropzone = false;
          socketObj.emit("resend_msg", { Body: data[0], tid: $chat.tid });
          // SentMessage_Func({ msg: data[0].Body, display: true });
          $("#message-to-send").attr("disabled", false);
        } else chatOptions.presentFile++;
        if (chatOptions.dropfiles.length > chatOptions.presentFile)
          uploadDocuments(el);
      },
      error: function(jqXHR, exception) {
        el.find(`[data-fileno='${chatOptions.presentFile}']`).addClass(
          "uploadError"
        );
        el.find(".progress")
          .eq(chatOptions.presentFile)
          .hide();
        el.find(
          `[data-fileno='${chatOptions.presentFile}'] .filesRetry`
        ).show();
        el.find(".filesRetry").on("click", function() {
          $(this).hide();
          uploadDocuments(el);
        });
      }
    });
  }

  function readFile(evt) {
    var files = evt.target.files;
    console.log("files:::", files);
    var file = files[0];
    var src = URL.createObjectURL(file);
    var reader = new FileReader();

    reader.onload = function(event) {
      $("#msg_footer").hide();
      $("#file-upload_footer").addClass("active");
      $("#file-upload_footer li").prepend(file.name);
      chatOptions.fileAttached = true;
      var msg_data = {
        from: $chat.user.guid,
        workflowId: $chat.workflowId,
        Body: "/file",
        domain: $chat.domain,
        device: $chat.device,
        tid: $chat.tid,
        Agent: "Workflow",
        userId: $chat.workflowUserId,
        fileRaw: event.target.result,
        src: src,
        filename: file.name,
        fileType: file.type,
        comment: $("#message-to-send").val()
      };

      fileAttachData = msg_data;
      $("#message-to-send").focus();
    };
    reader.readAsDataURL(file);
  }

  var sentFile_Func = function sentFile_Func(msg_data) {
    chatOptions.fileReceived = false;
    socketObj.emit("sent_file", msg_data);
    var validImageTypes = ["image/gif", "image/jpeg", "image/png"];
    var validVideoTypes = ["video/ogg", "video/mp4", "video/webm"];
    $("#typingIndication").remove();
    var time = getTime_Func();
    var message_div;
    if ($.inArray(msg_data.fileType, validImageTypes) > 0) {
      message_div =
        "<article><label>" +
        $chat.user.name +
        '</label><div class="thread"><div class="card picture-card"><figure><img src="' +
        msg_data.src +
        '" alt="" width="100%"><figcaption>' +
        msg_data.comment +
        '</figcaption></figure></div></div><span class="time">' +
        (chatOptions.connection ? "" : customDiv.notDelivered) +
        time +
        "</span></article>";
    } else if ($.inArray(msg_data.fileType, validVideoTypes) > 0) {
      message_div =
        "<article><label>" +
        $chat.user.name +
        '</label><div class="thread"><div class="card video-card">\n        <video id="playerA" controls aposter="../../../ui-themes/karma/images/chat_video-poster.svg" onclick="this.play()"><source src="' +
        msg_data.src +
        '" type="' +
        msg_data.fileType +
        '"></video>\n        <p>' +
        msg_data.comment +
        '</p></div></div><span class="time">' +
        (chatOptions.connection ? "" : customDiv.notDelivered) +
        time +
        "</span></article>";
    } else {
      message_div =
        "<article><label>" +
        $chat.user.name +
        '</label><div class="thread"><p><i class="fa fa-paperclip" aria-hidden="true"></i>' +
        msg_data.filename +
        "<br>" +
        msg_data.comment +
        '</p></div><span class="time">' +
        (chatOptions.connection ? "" : customDiv.notDelivered) +
        time +
        "</span></article>";
    }

    $("#messageBody").append(message_div);
    clearFileInput();
    $("#message-to-send").val("");
    scrollToBottom();
  };

  $("#panicButton").click(function() {
    if (!$chat.options.menuConf)
      SentMessage_Func({ msg: "/help", display: false });
  });

  window.addEventListener(
    "message",
    function(event) {
      if (typeof event.data == "object" && event.data.call == "sendValue") {
        SentMessage_Func({
          msg: "/data",
          display: false,
          data: event.data.data
        });
      }
    },
    false
  );

  ConnectSocket_Func();
};

////////////
$(document).ready(function() {
  Runchat(Conf);
});

window.addEventListener(
  "dragover",
  function(e) {
    e = e || event;
    e.preventDefault();
  },
  false
);
window.addEventListener(
  "drop",
  function(e) {
    e = e || event;
    e.preventDefault();
  },
  false
);

/*Card with slider*/
(function($) {
  $.fn.cardSlider = function(options) {
    $(this).each(function() {
      var $content = $(this);
      function changeContentScroll(pos) {
        var currentPos = $content.scrollTop();
        $content.stop().animate({ scrollTop: currentPos + pos }, 350, "swing");
      }
      $content.find(".upClick").click(function() {
        changeContentScroll(-170);
      });
      $content.find(".downClick").click(function() {
        changeContentScroll(+170);
      });
    });
  };
})(jQuery);
/*Card with slider End*/
